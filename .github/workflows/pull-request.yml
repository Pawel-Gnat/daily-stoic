name: Pull Request Checks

on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  deployments: write

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  unit-tests:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:unit:coverage

      - name: Upload unit test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7

  deploy-preview:
    name: Deploy Preview
    needs: [lint, unit-tests]
    runs-on: ubuntu-latest
    environment: integration
    outputs:
      preview_url: ${{ steps.deployment.outputs.preview_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

      - name: Deploy to Cloudflare Pages
        id: deployment
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name='daily-stoic' --branch=${{ github.head_ref }}

  e2e-tests:
    name: E2E Tests
    needs: deploy-preview
    runs-on: ubuntu-latest
    environment: integration
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Wait for Preview Deployment
        # Use curl to poll the preview URL until it's available (returns 200 OK)
        # Retries 15 times with a 10-second delay (total wait time up to 150 seconds)
        run: |
          echo "Waiting for preview deployment at ${{ needs.deploy-preview.outputs.preview_url }} ..."
          curl --retry 15 --retry-delay 10 --retry-connrefused --fail --silent --output /dev/null ${{ needs.deploy-preview.outputs.preview_url }}
          echo "Preview deployment is ready!"

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          BASE_URL: ${{ needs.deploy-preview.outputs.preview_url }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
          E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
          E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: test-results/
          retention-days: 7

  status-comment:
    name: Status Comment
    if: always()
    needs: [lint, unit-tests, deploy-preview, e2e-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Check status of previous jobs
        id: check
        run: |
          # Check status of all preceding jobs
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.unit-tests.result }}" == "success" && \
                "${{ needs.deploy-preview.result }}" == "success" && \
                "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Add success comment
        if: steps.check.outputs.status == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              # Update success comment to include deploy step
              body: '✅ All checks passed & preview deployed!\n\n- ✓ Lint: Passed\n- ✓ Unit Tests: Passed\n- ✓ Deploy Preview: Passed\n- ✓ E2E Tests: Passed\n\nPreview URL: ${{ needs.deploy-preview.outputs.preview_url }}'
            })

      - name: Add failure comment
        if: steps.check.outputs.status == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const lintStatus = "${{ needs.lint.result }}" === "success" ? "✓ Passed" : "❌ Failed";
            const unitStatus = "${{ needs.unit-tests.result }}" === "success" ? "✓ Passed" : "❌ Failed";
            # Add status for deploy-preview job
            const deployStatus = "${{ needs.deploy-preview.result }}" === "success" ? "✓ Passed" : "❌ Failed";
            const e2eStatus = "${{ needs.e2e-tests.result }}" === "success" ? "✓ Passed" : "❌ Failed";
            const previewUrlLine = "${{ needs.deploy-preview.result }}" === "success" ? `\nPreview URL: ${{ needs.deploy-preview.outputs.preview_url }}` : "";


            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              # Update failure comment to include deploy step status and URL if successful
              body: `❌ Some checks failed. Review logs for details.\n\n- ${lintStatus}: Lint\n- ${unitStatus}: Unit Tests\n- ${deployStatus}: Deploy Preview\n- ${e2eStatus}: E2E Tests${previewUrlLine}`
            })
